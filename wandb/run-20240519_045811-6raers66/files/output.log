


























































































































































































































































































































































































































































































Epoch 1/40: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2475/2475 [15:56<00:00,  2.59it/s]











































Epoch 1/40: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 622/622 [01:28<00:00,  7.06it/s]


























































































































































































































































































































































































































































































Epoch 2/40: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2475/2475 [15:49<00:00,  2.61it/s]


















Epoch 2/40:  43%|██████████████████████████████████████████████████████                                                                         | 265/622 [00:39<00:52,  6.76it/s]
Traceback (most recent call last):
  File "/gpfs/space/home/alimahar/hydra/train_depth.py", line 167, in <module>
    depth_output = model(inputs)
  File "/gpfs/space/home/alimahar/.conda/envs/e2e/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/space/home/alimahar/.conda/envs/e2e/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/space/home/alimahar/hydra/models/DenseDepth.py", line 65, in forward
    return self.decoder( self.encoder(x) )
  File "/gpfs/space/home/alimahar/.conda/envs/e2e/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/space/home/alimahar/.conda/envs/e2e/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/space/home/alimahar/hydra/models/DenseDepth.py", line 55, in forward
    for k, v in self.original_model.features._modules.items(): features.append( v(features[-1]) )
  File "/gpfs/space/home/alimahar/.conda/envs/e2e/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/space/home/alimahar/.conda/envs/e2e/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/space/home/alimahar/.conda/envs/e2e/lib/python3.10/site-packages/torchvision/models/densenet.py", line 122, in forward
    new_features = layer(features)
  File "/gpfs/space/home/alimahar/.conda/envs/e2e/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/space/home/alimahar/.conda/envs/e2e/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/space/home/alimahar/.conda/envs/e2e/lib/python3.10/site-packages/torchvision/models/densenet.py", line 88, in forward
    bottleneck_output = self.bn_function(prev_features)
  File "/gpfs/space/home/alimahar/.conda/envs/e2e/lib/python3.10/site-packages/torchvision/models/densenet.py", line 48, in bn_function
    concated_features = torch.cat(inputs, 1)
KeyboardInterrupt